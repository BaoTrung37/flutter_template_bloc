# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
require 'json'
require 'dotenv'

Dotenv.load '.env'

# def load_firebase_config(env)
#   config_file = File.read(File.join(__dir__, 'firebase_config.json'))
#   config = JSON.parse(config_file)
#   config[env]
# end

default_platform(:android)

platform :android do
  lane :app_distribution do |options|
    env = options[:env] || "dev"
    
    fastlane_root = File.expand_path(".",__dir__)
    app_id = ENV["FIREBASE_APP_ID_#{env.upcase}"]
    groups_file = File.join(fastlane_root,ENV["FIREBASE_GROUPS_FILE_#{env.upcase}"])
    service_credentials_file = File.join(fastlane_root,ENV["FIREBASE_SERVICE_CREDENTIALS_FILE_#{env.upcase}"])
    release_notes_file = File.join(fastlane_root,ENV["FIREBASE_RELEASE_NOTES_FILE_#{env.upcase}"])

    puts "env: #{env}"
    puts "app_id: #{app_id}"
    puts "groups_file: #{groups_file}"
    puts "service_credentials_file: #{service_credentials_file}"
    puts "release_notes_file: #{release_notes_file}"

    gradle(task: "clean")
    gradle(task: "assemble", flavor: env, build_type: "Release")
    
    # sh("fvm", "flutter", "clean")
    # sh("fvm", "flutter", "packages", "get")
    # sh("fvm", "flutter", "pub", "run", "build_runner", "build", "--delete-conflicting-outputs")
    # sh("fvm", "flutter", "build", "apk", "--flavor", "#{env}", "-t", "lib/main_#{env}.dart")
  
    # Define the root directory of the project
    root_dir = File.expand_path("../../", __dir__)

    # Construct the APK path dynamically from the root directory
    apk_path = "#{root_dir}/build/app/outputs/apk/#{env}/release/app-#{env}-release.apk"

    puts "Using APK path: #{apk_path}"
    
    firebase_app_distribution(
      app: app_id,
      apk_path: apk_path,
      groups_file: groups_file,
      service_credentials_file: service_credentials_file,
      release_notes_file: release_notes_file
    )
    
    # # output_path = File.join(__dir__, "build/app/outputs/apk/#{env}/release/")
    # output_json_path = File.join(__dir__, "build/app/outputs/apk/#{env}/release/output-metadata.json")

    # if File.exist?(output_json_path)
    #   begin
    #     # Read and parse the JSON file
    #     file_content = File.read(output_json_path)
    #     build_output = JSON.parse(file_content)
        
    #     elements = build_output["elements"][0]
    #     apk_path = File.join(output_path, elements["outputFile"])
    
    #     firebase_app_distribution(
    #       app: app_id,
    #       groups_file: groups_file,
    #       apk_path: apk_path,
    #     )
    #   rescue JSON::ParserError
    #     UI.error("Failed to parse JSON file: #{output_json_path}")
    #   end
    # else
    #   UI.error("File not found: #{output_json_path}")
    # end
  end

  lane :app_distribution_dev do
    app_distribution(env: "dev")
  end

  lane :app_distribution_prod do
    app_distribution(env: "prod")
  end

  lane :play_store do |options|
    track = options[:track]
    puts "track in options: #{track}"
    if !options[:track]
      track = "beta"
    end
    puts "env: #{track}"

    sh("fastlane", "supply", "init", "--json_key", "../../credentials/play-store.json", "--track", "#{track}")

    sh("flutter", "packages", "get")
    sh("flutter", "clean")
    sh("flutter", "build", "appbundle")

    upload_to_play_store(
      track: track,
      aab: "../build/app/outputs/bundle/release/app-release.aab",
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_apk: true
    )
  end
  
end
